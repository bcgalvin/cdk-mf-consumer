[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "cdk-mf-consumer"
dynamic = ["version"]
description = ""
readme = "README.md"
requires-python = ">=3.12,<3.13"
authors = [{ name = "Bryan Galvin", email = "bcgalvin@gmail.com" }]
classifiers = [
  "Topic :: Internet",
  "Topic :: Software Development",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pydantic>=2.9",
  "pydantic-settings>=2.6.1",
  "python-dotenv>=1.0.1",
  "loguru>=0.7.2",
  "rich>=13.0.0",
  "typer>=0.13.0",
  "httpx>=0.25.3",
  "polars[pyarrow,pydantic]>=1.16.0",
  "metaflow>=2.12.0",
  "metaflow-stubs>=2.12.0",
  "jupyterlab",
  "tenacity>=8.2.3"
]

[project.urls]
Documentation = "https://github.com/bcgalvin/cdk-mf-consumer/blob/main/README.md"
Issues = "https://github.com/bcgalvin/cdk-mf-consumer/issues"
Source = "https://github.com/bcgalvin/cdk-mf-consumer"

[project.scripts]
cdk-mf-consumer = "cdk_mf_consumer.cli:run"

[project.optional-dependencies]
lint = [
  "pip>=24.2",
  "black>=24.3.0",
  "ruff>=0.7.3",
  "mypy>=1.13.0",
  "pylint>=3",
  "flake8>=6.1.0",
]
tests = [
  "pytest>=8.1.1",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.20.3",
  "pytest-mock>=3.12.0",
]
dev = ["cdk_mf_consumer[lint,tests]"]

[tool.hatch.version]
path = "src/cdk_mf_consumer/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.env]
requires = ["uv>=0.1.0"]

[tool.hatch.envs.default]
type = "virtual"
installer = "uv"
features = ["dev"]
[tool.hatch.envs.default.scripts]
run_ingest = "python -m cdk_mf_consumer.flows.ingest"
run_update = "python -m cdk_mf_consumer.flows.update"

[tool.hatch.envs.lint]
type = "virtual"
installer = "uv"
features = ["lint"]

[tool.hatch.envs.lint.scripts]
check_simple = [
  "mypy --install-types --non-interactive --soft-error-limit=3 {args:src/cdk_mf_consumer}",
]
check_pylint = ["pylint {args:src/cdk_mf_consumer}"]
check = ["mypy {args:src/cdk_mf_consumer}"]
format = [
  "black {args:src/cdk_mf_consumer}",
  "ruff format {args:src/cdk_mf_consumer}",
  "isort {args:src/cdk_mf_consumer}",
]

[tool.hatch.envs.tests]
type = "virtual"
installer = "uv"
features = ["tests"]

[tool.hatch.envs.tests.scripts]
run = "pytest -x  tests/  -vv"

[tool.hatch.envs.infra]
type = "virtual"
installer = "uv"
python = "3.12"
dependencies = [
  "aws-cdk-lib==2.173.2",
  "constructs>=10.0.0,<11.0.0",
  "pytest==6.2.5"
]
[tool.hatch.envs.infra.scripts]
cdk = "cd infrastructure && cdk {args}"
test = "cd infrastructure && pytest {args:tests}"

[tool.hatch.build.targets.wheel]
packages = ["src/cdk_mf_consumer"]

[tool.hatch.build]
reproducible = true
dev-mode-dirs = ["src", "other_dir"]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = ["reference-implementation/**"]

[tool.ruff.lint]
exclude = ["project_docs/**", "tests/data/metaflow/**", "pyproject.toml"]
select = ["ALL"]
ignore = [
  "A001",
  "ANN",
  "ANN002",
  "ARG001",
  "BLE001",
  "COM",
  "D",
  "E501",
  "EM101",
  "EM102",
  "ERA001",
  "FBT",
  "FIX",
  "INP001",
  "ISC001",
  "N802",
  "PD",
  "PGH003",
  "PLR0913",
  "PLR2004",
  "RSE102",
  "S101",
  "S311",
  "S603",
  "SLF001",
  "T201",
  "TD",
  "TRY003",
  "TRY300",
  "W293",
]
extend-select = [
  "PLC", # pylint warnings
  "PLE", # pylint errors
  "PLR", # pylint refactor warnings
  "PLW", # pylint warnings
  "TRY", # tryceratops (better exception handling)
]

[tool.lint.extend-select]
extend-select = [
  "PLC", # pylint warnings
  "PLE", # pylint errors
  "PLR", # pylint refactor warnings
  "PLW", # pylint warnings
  "TRY", # tryceratops (better exception handling)
]

[tool.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ANN001", "ANN201"]

[tool.lint.isort]
known-first-party = ["cdk_mf_consumer"]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
check_untyped_defs = true
disable_error_code = "import-untyped"

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
